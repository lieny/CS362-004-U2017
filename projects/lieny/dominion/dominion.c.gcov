        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:101
        -:    0:Programs:54
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2173910 returned 100% blocks executed 100%
  2173910:    8:int compare(const void* a, const void* b) {
  2173910:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 184308 (fallthrough)
branch  1 taken 1989602
   184308:   10:		return 1;
  1989602:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 658954 (fallthrough)
branch  1 taken 1330648
   658954:   12:		return -1;
  1330648:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 60484 returned 100% blocks executed 88%
    60484:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;			
        -:   43:	//set up random number generator
    60484:   44:	SelectStream(1);
call    0 returned 60484
    60484:   45:	PutSeed((long)randomSeed);
call    0 returned 60484
        -:   46:
        -:   47:	//check number of players
    60484:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 60484 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 60484
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
    60484:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
   665324:   57:	for (i = 0; i < 10; i++)
branch  0 taken 604840
branch  1 taken 60484 (fallthrough)
        -:   58:	{
  6653240:   59:		for (j = 0; j < 10; j++)
branch  0 taken 6048400
branch  1 taken 604840 (fallthrough)
        -:   60:		{
  6048400:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5443560 (fallthrough)
branch  1 taken 604840
branch  2 taken 0 (fallthrough)
branch  3 taken 5443560
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
    60484:   73:	if (numPlayers == 2)
branch  0 taken 60484 (fallthrough)
branch  1 taken 0
        -:   74:	{
    60484:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
    60484:   87:	if (numPlayers == 2)
branch  0 taken 60484 (fallthrough)
branch  1 taken 0
        -:   88:	{
    60484:   89:		state->supplyCount[estate] = 8;
    60484:   90:		state->supplyCount[duchy] = 8;
    60484:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
    60484:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
    60484:  102:	state->supplyCount[silver] = 40;
    60484:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
  1270164:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1209680
branch  1 taken 60484 (fallthrough)
        -:  107:	{
  9979860:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 9375020
branch  1 taken 604840 (fallthrough)
        -:  109:		{
  9375020:  110:			if (kingdomCards[j] == i)
branch  0 taken 604840 (fallthrough)
branch  1 taken 8770180
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
   604840:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 544430 (fallthrough)
branch  1 taken 60410
branch  2 taken 60484 (fallthrough)
branch  3 taken 483946
        -:  114:				{
   241788:  115:					if (numPlayers == 2){ 
branch  0 taken 120894 (fallthrough)
branch  1 taken 0
   120894:  116:						state->supplyCount[i] = 8; 
        -:  117:					}
    #####:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
   483946:  122:					state->supplyCount[i] = 10;
        -:  123:				}
   604840:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
  8770180:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
   181452:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 120968
branch  1 taken 60484 (fallthrough)
        -:  139:	{
   120968:  140:		state->deckCount[i] = 0;
   483872:  141:		for (j = 0; j < 3; j++)
branch  0 taken 362904
branch  1 taken 120968 (fallthrough)
        -:  142:		{
   362904:  143:			state->deck[i][j] = estate;
   362904:  144:			state->deckCount[i]++;
        -:  145:		}
   967744:  146:		for (j = 3; j < 10; j++)
branch  0 taken 846776
branch  1 taken 120968 (fallthrough)
        -:  147:		{
   846776:  148:			state->deck[i][j] = copper;
   846776:  149:			state->deckCount[i]++;		
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
   181452:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 120968
branch  1 taken 60484 (fallthrough)
        -:  155:	{
   120968:  156:		if ( shuffle(i, state) < 0 )
call    0 returned 120968
branch  1 taken 0 (fallthrough)
branch  2 taken 120968
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
   181452:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 120968
branch  1 taken 60484 (fallthrough)
        -:  164:	{  
        -:  165:		//initialize hand size to zero
   120968:  166:		state->handCount[i] = 0;
   120968:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
  1693552:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 1633068
branch  1 taken 60484 (fallthrough)
        -:  177:	{
  1633068:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
    60484:  182:	state->outpostPlayed = 0;
    60484:  183:	state->phase = 0;
    60484:  184:	state->numActions = 1;
    60484:  185:	state->numBuys = 1;
    60484:  186:	state->playedCardCount = 0;
    60484:  187:	state->whoseTurn = 0;
    60484:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
   362904:  192:	for (it = 0; it < 5; it++){
branch  0 taken 302420
branch  1 taken 60484 (fallthrough)
   302420:  193:		drawCard(state->whoseTurn, state);
call    0 returned 302420
        -:  194:	}
        -:  195:
    60484:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 60484
        -:  197:
    60484:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 121457 returned 100% blocks executed 100%
   121457:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
   121457:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
   121457:  209:	if (state->deckCount[player] < 1)
branch  0 taken 277 (fallthrough)
branch  1 taken 121180
      277:  210:		return -1;
   121180:  211:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 121180
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1503742:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 1261382
branch  1 taken 121180 (fallthrough)
  1261382:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 1261382
  1261382:  216:		newDeck[newDeckPos] = state->deck[player][card];
  1261382:  217:		newDeckPos++;
  8127685:  218:		for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6866303
branch  1 taken 1261382 (fallthrough)
  6866303:  219:			state->deck[player][i] = state->deck[player][i+1];
        -:  220:		}
  1261382:  221:		state->deckCount[player]--;
        -:  222:	}
  1382562:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 1261382
branch  1 taken 121180 (fallthrough)
  1261382:  224:		state->deck[player][i] = newDeck[i];
  1261382:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
   121180:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 36 returned 100% blocks executed 100%
       36:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
       36:  280:	who = state->whoseTurn;
        -:  281:
       36:  282:	if (state->numBuys < 1){
branch  0 taken 9 (fallthrough)
branch  1 taken 27
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
        9:  285:		return -1;
       27:  286:	} else if (supplyCount(supplyPos, state) <1){
call    0 returned 27
branch  1 taken 9 (fallthrough)
branch  2 taken 18
        -:  287:		if (DEBUG)
        -:  288:			printf("There are not any of that type of card left\n");
        9:  289:		return -1;
       18:  290:	} else if (state->coins < getCost(supplyPos)){
call    0 returned 18
branch  1 taken 9 (fallthrough)
branch  2 taken 9
        -:  291:		if (DEBUG) 
        -:  292:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        9:  293:		return -1;
        -:  294:	} else {
        9:  295:		state->phase=1;
        -:  296:		//state->supplyCount[supplyPos]--;
        9:  297:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 9
        -:  298:
        9:  299:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 9
        9:  300:		state->numBuys--;
        -:  301:		if (DEBUG)
        -:  302:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:	}
        -:  304:
        -:  305:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:	//state->discardCount[who]++;
        -:  307:
        9:  308:	return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:	return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:	return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 36 returned 100% blocks executed 100%
       36:  320:int supplyCount(int card, struct gameState *state) {
       36:  321:	return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 54 returned 100% blocks executed 100%
       54:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:	int i;
       54:  326:	int count = 0;
        -:  327:
      414:  328:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 360
branch  1 taken 54 (fallthrough)
        -:  329:	{
      360:  330:		if (state->deck[player][i] == card) count++;
branch  0 taken 99 (fallthrough)
branch  1 taken 261
        -:  331:	}
        -:  332:
      468:  333:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 414
branch  1 taken 54 (fallthrough)
        -:  334:	{
      414:  335:		if (state->hand[player][i] == card) count++;
branch  0 taken 108 (fallthrough)
branch  1 taken 306
        -:  336:	}
        -:  337:
      468:  338:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 414
branch  1 taken 54 (fallthrough)
        -:  339:	{
      414:  340:		if (state->discard[player][i] == card) count++;
branch  0 taken 108 (fallthrough)
branch  1 taken 306
        -:  341:	}
        -:  342:
       54:  343:	return count;
        -:  344:}
        -:  345:
function whoseTurn called 118877 returned 100% blocks executed 100%
   118877:  346:int whoseTurn(struct gameState *state) {
   118877:  347:	return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 32 returned 100% blocks executed 93%
       32:  350:int endTurn(struct gameState *state) {
        -:  351:	int k;
        -:  352:	int i;
       32:  353:	int currentPlayer = whoseTurn(state);
call    0 returned 32
        -:  354:
        -:  355:	//Discard hand
      254:  356:	for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 222
branch  1 taken 32 (fallthrough)
      222:  357:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      222:  358:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:	}
       32:  360:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:	//Code for determining the player
       32:  363:	if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 32 (fallthrough)
branch  1 taken 0
       32:  364:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:	}
        -:  366:	else{
    #####:  367:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:	}
        -:  369:
       32:  370:	state->outpostPlayed = 0;
       32:  371:	state->phase = 0;
       32:  372:	state->numActions = 1;
       32:  373:	state->coins = 0;
       32:  374:	state->numBuys = 1;
       32:  375:	state->playedCardCount = 0;
       32:  376:	state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:	//int k; move to top
        -:  379:	//Next player draws hand
      192:  380:	for (k = 0; k < 5; k++){
branch  0 taken 160
branch  1 taken 32 (fallthrough)
      160:  381:		drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 160
        -:  382:	}
        -:  383:
        -:  384:	//Update money
       32:  385:	updateCoins(state->whoseTurn, state , 0);
call    0 returned 32
        -:  386:
       32:  387:	return 0;
        -:  388:}
        -:  389:
function isGameOver called 90 returned 100% blocks executed 100%
       90:  390:int isGameOver(struct gameState *state) {
        -:  391:	int i;
        -:  392:	int j;
        -:  393:
        -:  394:	//if stack of Province cards is empty, the game ends
       90:  395:	if (state->supplyCount[province] == 0)
branch  0 taken 27 (fallthrough)
branch  1 taken 63
        -:  396:	{
       27:  397:		return 1;
        -:  398:	}
        -:  399:
        -:  400:	//if three supply pile are at 0, the game ends
       63:  401:	j = 0;
     1638:  402:	for (i = 0; i < 25; i++)
branch  0 taken 1575
branch  1 taken 63 (fallthrough)
        -:  403:	{
     1575:  404:		if (state->supplyCount[i] == 0)
branch  0 taken 162 (fallthrough)
branch  1 taken 1413
        -:  405:		{
      162:  406:			j++;
        -:  407:		}
        -:  408:	}
       63:  409:	if ( j >= 3)
branch  0 taken 54 (fallthrough)
branch  1 taken 9
        -:  410:	{
       54:  411:		return 1;
        -:  412:	}
        -:  413:
        9:  414:	return 0;
        -:  415:}
        -:  416:
function scoreFor called 27 returned 100% blocks executed 88%
       27:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:	int i;
       27:  420:	int score = 0;
        -:  421:	//score from hand
       81:  422:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 54
branch  1 taken 27 (fallthrough)
        -:  423:	{
       54:  424:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  425:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  426:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  427:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  428:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  429:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
call    2 returned 9
        -:  430:	}
        -:  431:
        -:  432:	//score from discard
       81:  433:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 54
branch  1 taken 27 (fallthrough)
        -:  434:	{
       54:  435:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  436:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  437:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  438:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  439:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
       54:  440:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 9 (fallthrough)
branch  1 taken 45
call    2 returned 9
        -:  441:	}
        -:  442:
        -:  443:	//score from deck
       81:  444:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 54
branch  1 taken 27 (fallthrough)
        -:  445:	{
       54:  446:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 54
       54:  447:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 27 (fallthrough)
branch  1 taken 27
       54:  448:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0 (fallthrough)
branch  1 taken 54
       54:  449:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0 (fallthrough)
branch  1 taken 54
       54:  450:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0 (fallthrough)
branch  1 taken 54
       54:  451:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0 (fallthrough)
branch  1 taken 54
call    2 never executed
        -:  452:	}
        -:  453:
       27:  454:	return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:	int i;	
        -:  459:	int j;
        -:  460:	int highScore;
        -:  461:	int currentPlayer;
        -:  462:
        -:  463:	//get score for each player
    #####:  464:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:	{
        -:  466:		//set unused player scores to -9999
    #####:  467:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:		{
    #####:  469:			players[i] = -9999;
        -:  470:		}
        -:  471:		else
        -:  472:		{
    #####:  473:			players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:		}
        -:  475:	}
        -:  476:
        -:  477:	//find highest score
    #####:  478:	j = 0;
    #####:  479:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:		{
    #####:  483:			j = i;
        -:  484:		}
        -:  485:	}
    #####:  486:	highScore = players[j];
        -:  487:
        -:  488:	//add 1 to players who had less turns
    #####:  489:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:	{
    #####:  492:		if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:		{
    #####:  494:			players[i]++;
        -:  495:		}
        -:  496:	}
        -:  497:
        -:  498:	//find new highest score
    #####:  499:	j = 0;
    #####:  500:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:	{
    #####:  502:		if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:		{
    #####:  504:			j = i;
        -:  505:		}
        -:  506:	}
    #####:  507:	highScore = players[j];
        -:  508:
        -:  509:	//set winners in array to 1 and rest to 0
    #####:  510:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:	{
    #####:  512:		if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:		{
    #####:  514:			players[i] = 1;
        -:  515:		}
        -:  516:		else
        -:  517:		{
    #####:  518:			players[i] = 0;
        -:  519:		}
        -:  520:	}
        -:  521:
    #####:  522:	return 0;
        -:  523:}
        -:  524:
function drawCard called 752485 returned 100% blocks executed 100%
   752485:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:	int deckCounter;
   752485:  528:	if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 350 (fallthrough)
branch  1 taken 752135
        -:  529:
        -:  530:		//Step 1 Shuffle the discard pile back into a deck
        -:  531:		int i;
        -:  532:		//Move discard to deck
    52052:  533:		for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 51702
branch  1 taken 350 (fallthrough)
    51702:  534:			state->deck[player][i] = state->discard[player][i];
    51702:  535:			state->discard[player][i] = -1;
        -:  536:		}
        -:  537:
      350:  538:		state->deckCount[player] = state->discardCount[player];
      350:  539:		state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:		//Shufffle the deck
      350:  542:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 350
        -:  543:
        -:  544:		if (DEBUG){//Debug statements
        -:  545:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:		}
        -:  547:
      350:  548:		state->discardCount[player] = 0;
        -:  549:
        -:  550:		//Step 2 Draw Card
      350:  551:		count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:		if (DEBUG){//Debug statements
        -:  554:			printf("Current hand count: %d\n", count);
        -:  555:		}
        -:  556:
      350:  557:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      350:  559:		if (deckCounter == 0)
branch  0 taken 138 (fallthrough)
branch  1 taken 212
      138:  560:			return -1;
        -:  561:
      212:  562:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      212:  563:		state->deckCount[player]--;
      212:  564:		state->handCount[player]++;//Increment hand count
        -:  565:	}
        -:  566:
        -:  567:	else{
   752135:  568:		int count = state->handCount[player];//Get current hand count for player
        -:  569:		int deckCounter;
        -:  570:		if (DEBUG){//Debug statements
        -:  571:			printf("Current hand count: %d\n", count);
        -:  572:		}
        -:  573:
   752135:  574:		deckCounter = state->deckCount[player];//Create holder for the deck count
   752135:  575:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   752135:  576:		state->deckCount[player]--;
   752135:  577:		state->handCount[player]++;//Increment hand count
        -:  578:	}
        -:  579:
   752347:  580:	return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 10%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:	switch( cardNumber ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 27
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:	{
        -:  587:		case curse:
    #####:  588:			return 0;
        -:  589:		case estate:
    #####:  590:			return 2;
        -:  591:		case duchy:
       27:  592:			return 5;
        -:  593:		case province:
    #####:  594:			return 8;
        -:  595:		case copper:
    #####:  596:			return 0;
        -:  597:		case silver:
    #####:  598:			return 3;
        -:  599:		case gold:
    #####:  600:			return 6;
        -:  601:		case adventurer:
    #####:  602:			return 6;
        -:  603:		case council_room:
    #####:  604:			return 5;
        -:  605:		case feast:
    #####:  606:			return 4;
        -:  607:		case gardens:
    #####:  608:			return 4;
        -:  609:		case mine:
    #####:  610:			return 5;
        -:  611:		case remodel:
    #####:  612:			return 4;
        -:  613:		case smithy:
    #####:  614:			return 4;
        -:  615:		case village:
    #####:  616:			return 3;
        -:  617:		case baron:
    #####:  618:			return 4;
        -:  619:		case great_hall:
    #####:  620:			return 3;
        -:  621:		case minion:
    #####:  622:			return 5;
        -:  623:		case steward:
    #####:  624:			return 3;
        -:  625:		case tribute:
    #####:  626:			return 5;
        -:  627:		case ambassador:
    #####:  628:			return 3;
        -:  629:		case cutpurse:
    #####:  630:			return 4;
        -:  631:		case embargo: 
    #####:  632:			return 2;
        -:  633:		case outpost:
    #####:  634:			return 5;
        -:  635:		case salvager:
    #####:  636:			return 4;
        -:  637:		case sea_hag:
    #####:  638:			return 4;
        -:  639:		case treasure_map:
    #####:  640:			return 4;
        -:  641:	}
        -:  642:
    #####:  643:	return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:	int i;
        -:  649:	int j;
        -:  650:	int k;
        -:  651:	int x;
        -:  652:	int index;
    #####:  653:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:	int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:	int tributeRevealedCards[2] = {-1, -1};
        -:  657:	int temphand[MAX_HAND];// moved above the if statement 
        -:  658:	/* VL: Follow variables moved inside adventurerCard for refactoring
        -:  659:	// int drawntreasure=0; 
        -:  660:	// int cardDrawn;	  
        -:  661:	//int z = 0;// this is the counter for the temp hand
        -:  662:	*/
    #####:  663:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:		nextPlayer = 0;
        -:  665:	}
        -:  666:
        -:  667:
        -:  668:	//uses switch to select card and perform actions
    #####:  669:	switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:	{
        -:  671:		case adventurer:
    #####:  672:			return adventurerCard(state);
call    0 never executed
        -:  673:
        -:  674:		case council_room:
        -:  675:			//+4 Cards
    #####:  676:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  677:			{
    #####:  678:				drawCard(currentPlayer, state);
call    0 never executed
        -:  679:			}
        -:  680:
        -:  681:			//+1 Buy
    #####:  682:			state->numBuys++;
        -:  683:
        -:  684:			//Each other player draws a card
    #####:  685:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  686:			{
    #####:  687:				if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  688:				{
    #####:  689:					drawCard(i, state);
call    0 never executed
        -:  690:				}
        -:  691:			}
        -:  692:
        -:  693:			//put played card in played card pile
    #####:  694:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  695:
    #####:  696:			return 0;
        -:  697:
        -:  698:		case feast:
        -:  699:			//gain card with cost up to 5
        -:  700:			//Backup hand
    #####:  701:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  702:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:			}
        -:  705:			//Backup hand
        -:  706:
        -:  707:			//Update Coins for Buy
    #####:  708:			updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  709:			x = 1;//Condition to loop on
    #####:  710:			while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  711:				if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  712:					if (DEBUG)
        -:  713:						printf("None of that card left, sorry!\n");
        -:  714:
        -:  715:					if (DEBUG){
        -:  716:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:					}
        -:  718:				}
    #####:  719:				else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  720:					printf("That card is too expensive!\n");
call    0 never executed
        -:  721:
        -:  722:					if (DEBUG){
        -:  723:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:					}
        -:  725:				}
        -:  726:				else{
        -:  727:
        -:  728:					if (DEBUG){
        -:  729:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:					}
        -:  731:
    #####:  732:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  733:					x = 0;//No more buying cards
        -:  734:
        -:  735:					if (DEBUG){
        -:  736:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:					}
        -:  738:
        -:  739:				}
        -:  740:			}     
        -:  741:
        -:  742:			//Reset Hand
    #####:  743:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:				state->hand[currentPlayer][i] = temphand[i];
    #####:  745:				temphand[i] = -1;
        -:  746:			}
        -:  747:			//Reset Hand
        -:  748:
    #####:  749:			return 0;
        -:  750:
        -:  751:		case gardens:
    #####:  752:			return -1;
        -:  753:
        -:  754:		case mine:
    #####:  755:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  756:
    #####:  757:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  758:			{
    #####:  759:				return -1;
        -:  760:			}
        -:  761:
    #####:  762:			if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  763:			{
    #####:  764:				return -1;
        -:  765:			}
        -:  766:
    #####:  767:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  768:			{
    #####:  769:				return -1;
        -:  770:			}
        -:  771:
    #####:  772:			gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  773:
        -:  774:			//discard card from hand
    #####:  775:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:
        -:  777:			//discard trashed card
    #####:  778:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  779:			{
    #####:  780:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  781:				{
    #####:  782:					discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  783:					break;
        -:  784:				}
        -:  785:			}
        -:  786:
    #####:  787:			return 0;
        -:  788:
        -:  789:		case remodel:
    #####:  790:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  791:
    #####:  792:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  793:			{
    #####:  794:				return -1;
        -:  795:			}
        -:  796:
    #####:  797:			gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  798:
        -:  799:			//discard card from hand
    #####:  800:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  801:
        -:  802:			//discard trashed card
    #####:  803:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  804:			{
    #####:  805:				if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  806:				{
    #####:  807:					discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  808:					break;
        -:  809:				}
        -:  810:			}
        -:  811:
        -:  812:
    #####:  813:			return 0;
        -:  814:
        -:  815:		case smithy:
    #####:  816:			return smithyCard(state, handPos);
call    0 never executed
        -:  817:
        -:  818:		case village:
    #####:  819:			return villageCard(state, handPos);
call    0 never executed
        -:  820:
        -:  821:		case baron:
    #####:  822:			state->numBuys++;//Increase buys by 1!
    #####:  823:			if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  824:				int p = 0;//Iterator for hand!
    #####:  825:				int card_not_discarded = 1;//Flag for discard set!
    #####:  826:				while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  827:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  828:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  829:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  830:						state->discardCount[currentPlayer]++;
    #####:  831:						for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  832:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  833:						}
    #####:  834:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  835:						state->handCount[currentPlayer]--;
    #####:  836:						card_not_discarded = 0;//Exit the loop
        -:  837:					}
    #####:  838:					else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  839:						if(DEBUG) {
        -:  840:							printf("No estate cards in your hand, invalid choice\n");
        -:  841:							printf("Must gain an estate if there are any\n");
        -:  842:						}
    #####:  843:						if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:							gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  845:							state->supplyCount[estate]--;//Decrement estates
    #####:  846:							if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:								isGameOver(state);
call    0 never executed
        -:  848:							}
        -:  849:						}
    #####:  850:						card_not_discarded = 0;//Exit the loop
        -:  851:					}
        -:  852:
        -:  853:					else{
    #####:  854:						p++;//Next card
        -:  855:					}
        -:  856:				}
        -:  857:			}
        -:  858:
        -:  859:			else{
    #####:  860:				if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  861:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  862:					state->supplyCount[estate]--;//Decrement Estates
    #####:  863:					if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  864:						isGameOver(state);
call    0 never executed
        -:  865:					}
        -:  866:				}
        -:  867:			}
        -:  868:
        -:  869:
    #####:  870:			return 0;
        -:  871:
        -:  872:		case great_hall:
        -:  873:			//+1 Card
    #####:  874:			drawCard(currentPlayer, state);
call    0 never executed
        -:  875:
        -:  876:			//+1 Actions
    #####:  877:			state->numActions++;
        -:  878:
        -:  879:			//discard card from hand
    #####:  880:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  881:			return 0;
        -:  882:
        -:  883:		case minion:
    #####:  884:			return minionCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  885:
        -:  886:		case steward:
    #####:  887:			return stewardCard(state, choice1, choice2, choice3, handPos);
call    0 never executed
        -:  888:
        -:  889:		case tribute:
    #####:  890:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  891:				if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  892:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  893:					state->deckCount[nextPlayer]--;
        -:  894:				}
    #####:  895:				else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  896:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  897:					state->discardCount[nextPlayer]--;
        -:  898:				}
        -:  899:				else{
        -:  900:					//No Card to Reveal
        -:  901:					if (DEBUG){
        -:  902:						printf("No cards to reveal\n");
        -:  903:					}
        -:  904:				}
        -:  905:			}
        -:  906:
        -:  907:			else{
    #####:  908:				if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  909:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  910:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  911:						state->deckCount[nextPlayer]++;
    #####:  912:						state->discard[nextPlayer][i] = -1;
    #####:  913:						state->discardCount[nextPlayer]--;
        -:  914:					}
        -:  915:
    #####:  916:					shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  917:				} 
    #####:  918:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:				state->deckCount[nextPlayer]--;
    #####:  921:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  922:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  923:				state->deckCount[nextPlayer]--;
        -:  924:			}    
        -:  925:
    #####:  926:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  927:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  928:				state->playedCardCount++;
    #####:  929:				tributeRevealedCards[1] = -1;
        -:  930:			}
        -:  931:
    #####:  932:			for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  933:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  934:					state->coins += 2;
        -:  935:				}
        -:  936:
    #####:  937:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  938:					drawCard(currentPlayer, state);
call    0 never executed
    #####:  939:					drawCard(currentPlayer, state);
call    0 never executed
        -:  940:				}
        -:  941:				else{//Action Card
    #####:  942:					state->numActions = state->numActions + 2;
        -:  943:				}
        -:  944:			}
        -:  945:
    #####:  946:			return 0;
        -:  947:
        -:  948:		case ambassador:
    #####:  949:			j = 0;		//used to check if player has enough cards to discard
        -:  950:
    #####:  951:			if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  952:			{
    #####:  953:				return -1;				
        -:  954:			}
        -:  955:
    #####:  956:			if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:				return -1;
        -:  959:			}
        -:  960:
    #####:  961:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  962:			{
    #####:  963:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  964:				{
    #####:  965:					j++;
        -:  966:				}
        -:  967:			}
    #####:  968:			if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  969:			{
    #####:  970:				return -1;				
        -:  971:			}
        -:  972:
        -:  973:			if (DEBUG) 
        -:  974:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  975:
        -:  976:			//increase supply count for choosen card by amount being discarded
    #####:  977:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  978:
        -:  979:			//each other player gains a copy of revealed card
    #####:  980:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  983:				{
    #####:  984:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  985:				}
        -:  986:			}
        -:  987:
        -:  988:			//discard played card from hand
    #####:  989:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  990:
        -:  991:			//trash copies of cards returned to supply
    #####:  992:			for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  993:			{
    #####:  994:				for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  995:				{
    #####:  996:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  997:					{
    #####:  998:						discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  999:						break;
        -: 1000:					}
        -: 1001:				}
        -: 1002:			}			
        -: 1003:
    #####: 1004:			return 0;
        -: 1005:
        -: 1006:		case cutpurse:
        -: 1007:
    #####: 1008:			updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1009:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1012:				{
    #####: 1013:					for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1014:					{
    #####: 1015:						if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1016:						{
    #####: 1017:							discardCard(j, i, state, 0);
call    0 never executed
    #####: 1018:							break;
        -: 1019:						}
    #####: 1020:						if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1021:						{
    #####: 1022:							for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1023:							{
        -: 1024:								if (DEBUG)
        -: 1025:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1026:							}	
    #####: 1027:							break;
        -: 1028:						}		
        -: 1029:					}
        -: 1030:
        -: 1031:				}
        -: 1032:
        -: 1033:			}				
        -: 1034:
        -: 1035:			//discard played card from hand
    #####: 1036:			discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1037:
    #####: 1038:			return 0;
        -: 1039:
        -: 1040:
        -: 1041:		case embargo: 
        -: 1042:			//+2 Coins
    #####: 1043:			state->coins = state->coins + 2;
        -: 1044:
        -: 1045:			//see if selected pile is in play
    #####: 1046:			if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1047:			{
    #####: 1048:				return -1;
        -: 1049:			}
        -: 1050:
        -: 1051:			//add embargo token to selected supply pile
    #####: 1052:			state->embargoTokens[choice1]++;
        -: 1053:
        -: 1054:			//trash card
    #####: 1055:			discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1056:			return 0;
        -: 1057:
        -: 1058:		case outpost:
        -: 1059:			//set outpost flag
    #####: 1060:			state->outpostPlayed++;
        -: 1061:
        -: 1062:			//discard card
    #####: 1063:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1064:			return 0;
        -: 1065:
        -: 1066:		case salvager:
        -: 1067:			//+1 buy
    #####: 1068:			state->numBuys++;
        -: 1069:
    #####: 1070:			if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1071:			{
        -: 1072:				//gain coins equal to trashed card
    #####: 1073:				state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1074:				//trash card
    #####: 1075:				discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1076:			}
        -: 1077:
        -: 1078:			//discard card
    #####: 1079:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1080:			return 0;
        -: 1081:
        -: 1082:		case sea_hag:
    #####: 1083:			for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1084:				if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1085:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1086:					state->deckCount[i]--;
    #####: 1087:					state->discardCount[i]++;
    #####: 1088:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:				}
        -: 1090:			}
    #####: 1091:			return 0;
        -: 1092:
        -: 1093:		case treasure_map:
        -: 1094:			//search hand for another treasure_map
    #####: 1095:			index = -1;
    #####: 1096:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:			{
    #####: 1098:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:				{
    #####: 1100:					index = i;
    #####: 1101:					break;
        -: 1102:				}
        -: 1103:			}
    #####: 1104:			if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:			{
        -: 1106:				//trash both treasure cards
    #####: 1107:				discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:				discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:				//gain 4 Gold cards
    #####: 1111:				for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:				{
    #####: 1113:					gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1114:				}
        -: 1115:
        -: 1116:				//return success
    #####: 1117:				return 1;
        -: 1118:			}
        -: 1119:
        -: 1120:			//no second treasure_map found in hand
    #####: 1121:			return -1;
        -: 1122:	}
        -: 1123:
    #####: 1124:	return -1;
        -: 1125:}
        -: 1126:
function discardCard called 58373 returned 100% blocks executed 89%
    58373: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:
        -: 1130:	//if card is not trashed, added to Played pile 
    58373: 1131:	if (trashFlag < 1)
branch  0 taken 58361 (fallthrough)
branch  1 taken 12
        -: 1132:	{
        -: 1133:		//add card to played pile
    58361: 1134:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    58361: 1135:		state->playedCardCount++;
        -: 1136:	}
        -: 1137:
        -: 1138:	//set played card to -1
    58373: 1139:	state->hand[currentPlayer][handPos] = -1;
        -: 1140:
        -: 1141:	//remove card from player's hand
    58373: 1142:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 9 (fallthrough)
branch  1 taken 58364
        -: 1143:	{
        -: 1144:		//reduce number of cards in hand
        9: 1145:		state->handCount[currentPlayer]--;
        -: 1146:	}
    58364: 1147:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 58364
        -: 1148:	{
        -: 1149:		//reduce number of cards in hand
    #####: 1150:		state->handCount[currentPlayer]--;
        -: 1151:	}
        -: 1152:	else 	
        -: 1153:	{
        -: 1154:		//replace discarded card with last card in hand
    58364: 1155:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:		//set last card to -1
    58364: 1157:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:		//reduce number of cards in hand
    58364: 1159:		state->handCount[currentPlayer]--;
        -: 1160:	}
        -: 1161:
    58373: 1162:	return 0;
        -: 1163:}
        -: 1164:
function gainCard called 9 returned 100% blocks executed 70%
        9: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:	//Note: supplyPos is enum of choosen card
        -: 1168:
        -: 1169:	//check if supply pile is empty (0) or card is not used in game (-1)
        9: 1170:	if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 9
branch  1 taken 0 (fallthrough)
branch  2 taken 9
        -: 1171:	{
    #####: 1172:		return -1;
        -: 1173:	}
        -: 1174:
        -: 1175:	//added card for [whoseTurn] current player:
        -: 1176:	// toFlag = 0 : add to discard
        -: 1177:	// toFlag = 1 : add to deck
        -: 1178:	// toFlag = 2 : add to hand
        -: 1179:
        9: 1180:	if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 1181:	{
    #####: 1182:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:		state->deckCount[player]++;
        -: 1184:	}
        9: 1185:	else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 9
        -: 1186:	{
    #####: 1187:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:		state->handCount[player]++;
        -: 1189:	}
        -: 1190:	else
        -: 1191:	{
        9: 1192:		state->discard[player][ state->discardCount[player] ] = supplyPos;
        9: 1193:		state->discardCount[player]++;
        -: 1194:	}
        -: 1195:
        -: 1196:	//decrease number in supply pile
        9: 1197:	state->supplyCount[supplyPos]--;
        -: 1198:
        9: 1199:	return 0;
        -: 1200:}
        -: 1201:
function updateCoins called 60516 returned 100% blocks executed 82%
    60516: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:	int i;
        -: 1205:
        -: 1206:	//reset coin count
    60516: 1207:	state->coins = 0;
        -: 1208:
        -: 1209:	//add coins for each Treasure card in player's hand
   363096: 1210:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 302580
branch  1 taken 60516 (fallthrough)
        -: 1211:	{
   302580: 1212:		if (state->hand[player][i] == copper)
branch  0 taken 211793 (fallthrough)
branch  1 taken 90787
        -: 1213:		{
   211793: 1214:			state->coins += 1;
        -: 1215:		}
    90787: 1216:		else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 90787
        -: 1217:		{
    #####: 1218:			state->coins += 2;
        -: 1219:		}
    90787: 1220:		else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 90787
        -: 1221:		{
    #####: 1222:			state->coins += 3;
        -: 1223:		}	
        -: 1224:	}	
        -: 1225:
        -: 1226:	//add bonus
    60516: 1227:	state->coins += bonus;
        -: 1228:
    60516: 1229:	return 0;
        -: 1230:}
        -: 1231:
        -: 1232:/***********************************************************************************************
        -: 1233: * Assignment 2 Refactor functions
        -: 1234: * Refactored: Pick 5 cards implemented in dominion.c and implement them in seperate functions,
        -: 1235: * rather than as part of the switch statement in cardEffect
        -: 1236: * **********************************************************************************************/
function adventurerCard called 2095 returned 100% blocks executed 100%
     2095: 1237:int adventurerCard(struct gameState *state)
        -: 1238:{
     2095: 1239:	int drawntreasure = 0;
     2095: 1240:	int cardDrawn = 0;
        -: 1241:	int temphand[MAX_HAND];
     2095: 1242:	int z = 0;	// this is the counter for the temp hand
     2095: 1243:	int currentPlayer = whoseTurn(state);
call    0 returned 2095
        -: 1244:
   252831: 1245:	while(drawntreasure < 3){	//while(drawntreasure < 2)
branch  0 taken 248641
branch  1 taken 2095 (fallthrough)
   248641: 1246:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 139 (fallthrough)
branch  1 taken 248502
      139: 1247:			shuffle(currentPlayer, state);
call    0 returned 139
        -: 1248:		}
   248641: 1249:		drawCard(currentPlayer, state);
call    0 returned 248641
   248641: 1250:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   248641: 1251:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 242356 (fallthrough)
branch  1 taken 6285
branch  2 taken 242356 (fallthrough)
branch  3 taken 0
branch  4 taken 0 (fallthrough)
branch  5 taken 242356
     6285: 1252:			drawntreasure++;
        -: 1253:		else{
   242356: 1254:			temphand[z]=cardDrawn;
   242356: 1255:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   242356: 1256:			z++;
        -: 1257:		}
        -: 1258:	}
   246546: 1259:	while(z-1>=0){
branch  0 taken 242356
branch  1 taken 2095 (fallthrough)
   242356: 1260:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   242356: 1261:		z=z-1;
        -: 1262:	}
     2095: 1263:	return 0;
        -: 1264:}
        -: 1265:
function smithyCard called 50310 returned 100% blocks executed 100%
    50310: 1266:int smithyCard(struct gameState *state, int handPos)
        -: 1267:{
    50310: 1268:	int currentPlayer = whoseTurn(state);
call    0 returned 50310
    50310: 1269:	int i = 0;
        -: 1270:
        -: 1271:	//+3 Cards
   251550: 1272:	for(i = 0; i < 4; i++)	//for(i = 0; i < 3; i++)
branch  0 taken 201240
branch  1 taken 50310 (fallthrough)
        -: 1273:	{
   201240: 1274:		drawCard(currentPlayer, state);
call    0 returned 201240
        -: 1275:	}
        -: 1276:
        -: 1277:	//discard card from hand
    50310: 1278:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 50310
    50310: 1279:	return 0;
        -: 1280:}
        -: 1281:
function villageCard called 8033 returned 100% blocks executed 100%
     8033: 1282:int villageCard(struct gameState *state, int handPos)
        -: 1283:{
     8033: 1284:	int currentPlayer = whoseTurn(state);
call    0 returned 8033
        -: 1285:	//+1 Card
        -: 1286:	//drawCard(currentPlayer, state);
        -: 1287:
        -: 1288:	//+2 Actions
     8033: 1289:	state->numActions = state->numActions + 2;
        -: 1290:
        -: 1291:	//discard played card from hand
     8033: 1292:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 8033
     8033: 1293:	return 0;
        -: 1294:}
        -: 1295:
function minionCard called 0 returned 0% blocks executed 0%
    #####: 1296:int minionCard(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1297:{
    #####: 1298:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1299:	int i, j;
        -: 1300:
        -: 1301:	//+1 action
    #####: 1302:	state->numActions++;
        -: 1303:
        -: 1304:	//discard card from hand
    #####: 1305:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1306:
    #####: 1307:	if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1308:	{
    #####: 1309:		state->coins = state->coins + 2;
        -: 1310:	}
        -: 1311:
    #####: 1312:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1313:	{
        -: 1314:		//discard hand
    #####: 1315:		while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1316:		{
    #####: 1317:			discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1318:		}
        -: 1319:
        -: 1320:		//draw 4
    #####: 1321:		for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1322:		{
    #####: 1323:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1324:		}
        -: 1325:
        -: 1326:		//other players discard hand and redraw if hand size > 4
    #####: 1327:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1328:		{
    #####: 1329:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1330:			{
    #####: 1331:				if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1332:				{
        -: 1333:					//discard hand
    #####: 1334:					while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1335:					{
    #####: 1336:						discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1337:					}
        -: 1338:
        -: 1339:					//draw 4
    #####: 1340:					for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1341:					{
    #####: 1342:						drawCard(i, state);
call    0 never executed
        -: 1343:					}
        -: 1344:				}
        -: 1345:			}
        -: 1346:		}
        -: 1347:
        -: 1348:	}
    #####: 1349:	return 0;
        -: 1350:}
        -: 1351:/*
        -: 1352:int councilRoomCard(struct gameState *state, int handPos)
        -: 1353:{
        -: 1354:	int currentPlayer = whoseTurn(state);
        -: 1355:	int i;
        -: 1356:
        -: 1357:	//+4 Cards
        -: 1358:	for (i = 0; i < 4; i++)
        -: 1359:	{
        -: 1360:		drawCard(currentPlayer, state);
        -: 1361:	}
        -: 1362:
        -: 1363:	//+1 Buy
        -: 1364:	state->numBuys++;
        -: 1365:
        -: 1366:	//Each other player draws a card
        -: 1367:	for (i = 0; i < state->numPlayers; i++)
        -: 1368:	{
        -: 1369:		if ( i != currentPlayer )
        -: 1370:		{
        -: 1371:			drawCard(i, state);
        -: 1372:		}
        -: 1373:	}
        -: 1374:
        -: 1375:	//put played card in played card pile
        -: 1376:	discardCard(handPos, currentPlayer, state, 0);
        -: 1377:
        -: 1378:	return 0;
        -: 1379:}
        -: 1380:*/
function stewardCard called 18 returned 100% blocks executed 100%
       18: 1381:int stewardCard(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1382:{
       18: 1383:	int currentPlayer = whoseTurn(state);
call    0 returned 18
        -: 1384:	int i;
        -: 1385:
       18: 1386:	if (choice1 == 1)
branch  0 taken 6 (fallthrough)
branch  1 taken 12
        -: 1387:	{
        -: 1388:		//+2 cards
        6: 1389:		drawCard(currentPlayer, state);
call    0 returned 6
        6: 1390:		drawCard(currentPlayer, state);
call    0 returned 6
        -: 1391:	}
       12: 1392:	else if (choice1 == 2)
branch  0 taken 6 (fallthrough)
branch  1 taken 6
        -: 1393:	{
        -: 1394:		//+2 coins
        6: 1395:		state->coins = state->coins + 2;
        -: 1396:
       18: 1397:		for(i = 0; i < 2; i++)
branch  0 taken 12
branch  1 taken 6
       12: 1398:			drawCard(currentPlayer, state);
call    0 returned 12
        -: 1399:	}
        -: 1400:	else
        -: 1401:	{
        -: 1402:		//trash 2 cards in hand
        6: 1403:		discardCard(choice2, currentPlayer, state, 1);
call    0 returned 6
        6: 1404:		discardCard(choice3, currentPlayer, state, 1);
call    0 returned 6
        -: 1405:	}
        -: 1406:
        -: 1407:	//discard card from hand
       18: 1408:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 18
       18: 1409:	return 0;
        -: 1410:}
        -: 1411:
        -: 1412://end of dominion.c
        -: 1413:
